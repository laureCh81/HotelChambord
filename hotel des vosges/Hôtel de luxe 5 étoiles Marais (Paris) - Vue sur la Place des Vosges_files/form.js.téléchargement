function process(formUrl, resUrl, accountId, actionOptin, actionType, actionLink, formOptinUrl, formApiUser, formApiKey, actionAlias, actionSubject, actionRecipient, actionReply, actionContentTitle, actionContentMessage, actionEmailTitle, actionEmailMessage, actionErrorTitle, actionErrorMessage, formEditErrorMessage, formOptinTextSubscribe, formOptinTextDetails1, formOptinTextDetails2, formOptinTextContact, formOptinTextAntispam, formOptinTextAntispamLink, formOptinTextAntispamUrl) {
    try {
      var decodedFormUrl = htmlDecode(formUrl);
      var timezone_offset = '';
      var timezone_param = '&timezone=';
      var timezone_param_pos = decodedFormUrl.indexOf(timezone_param);
      if (timezone_param_pos !== -1) {
        var timezone_value = decodedFormUrl.substring(timezone_param_pos + timezone_param.length);
        var other_params = timezone_value.indexOf('&');
        if (other_params !== -1) {
          timezone_value = timezone_value.substring(0, other_params);
        }
        if (timezone_value === '') {
          timezone_value = 'Europe/Paris';
        }
        var timezone_date = new Date().toLocaleString('fr', {timeZone: timezone_value, timeZoneName: 'short'});
        var utc_str = 'UTC';
        var utc_pos = timezone_date.indexOf(utc_str);
        if (utc_pos !== -1) {
          timezone_offset = '&amp;timezoneOffset&#x3D;' + timezone_date.substring(utc_pos + utc_str.length);
        }
      }
      formUrl = formUrl + timezone_offset;
    } catch (e) {}
    var query_string='';
    actionAlias = decodeURIComponent(actionAlias);
    actionSubject = decodeURIComponent(actionSubject);
    actionRecipient = decodeURIComponent(actionRecipient);
    actionReply = decodeURIComponent(actionReply);
    actionContentTitle = decodeURIComponent(actionContentTitle);
    actionContentMessage = decodeURIComponent(actionContentMessage);
    actionEmailTitle = decodeURIComponent(actionEmailTitle);
    actionEmailMessage = decodeURIComponent(actionEmailMessage);
    actionErrorTitle = decodeURIComponent(actionErrorTitle);
    actionErrorMessage = decodeURIComponent(actionErrorMessage);
    formEditErrorMessage = decodeURIComponent(formEditErrorMessage);
    formOptinTextSubscribe = decodeURIComponent(formOptinTextSubscribe);
    formOptinTextDetails1 = decodeURIComponent(formOptinTextDetails1);
    formOptinTextDetails2 = decodeURIComponent(formOptinTextDetails2);
    formOptinTextContact = decodeURIComponent(formOptinTextContact);
    formOptinTextAntispam = decodeURIComponent(formOptinTextAntispam);
    formOptinTextAntispamLink = decodeURIComponent(formOptinTextAntispamLink);
    if (document.getElementById('conteneur') !== null) {
        document.getElementById('conteneur').style.display = '';
    }
    var d = document,
        recipient = '',
        data = {};
    for (var i = 0; i < d.getElementsByTagName('input').length; i++) {
        if (!d.getElementsByTagName('input')[i].hasAttribute('sb-form-input')) {
            continue;
        }
        if ((d.getElementsByTagName('input')[i].type === 'radio' && d.getElementsByTagName('input')[i].checked) ||
          d.getElementsByTagName('input')[i].type === 'text' ||
          d.getElementsByTagName('input')[i].type === 'email' ||
          d.getElementsByTagName('input')[i].type === 'tel' ||
          d.getElementsByTagName('input')[i].type === 'hidden' ||
          (d.getElementsByTagName('input')[i].type === 'number' &&
            decodeURIComponent(d.getElementsByTagName('input')[i].name) !== 'day' &&
            decodeURIComponent(d.getElementsByTagName('input')[i].name) !== 'month' &&
            decodeURIComponent(d.getElementsByTagName('input')[i].name) !== 'year')) {
            data[decodeURIComponent(d.getElementsByTagName('input')[i].name)] = d.getElementsByTagName('input')[i].value;
            query_string+=(query_string!='' )?'&':'';
            query_string+=encodeURIComponent(decodeURIComponent(d.getElementsByTagName('input')[i].name))+'='+encodeURIComponent(d.getElementsByTagName('input')[i].value);
            if (d.getElementsByTagName('input')[i].type === 'email') {
                recipient = d.getElementsByTagName('input')[i].value;
            }
        } else if (d.getElementsByTagName('input')[i].type == 'checkbox' && d.getElementsByTagName('input')[i].checked) {
            var name = decodeURIComponent(d.getElementsByTagName('input')[i].name);
            if (!(name in data)) {
                data[name] = d.getElementsByTagName('input')[i].value;
            } else {
                var val = data[name] + ', ' + d.getElementsByTagName('input')[i].value;
                data[name] = val;
            }
            if (query_string.indexOf(encodeURIComponent(decodeURIComponent(d.getElementsByTagName('input')[i].name))) != -1) {
                query_string+=', ' +encodeURIComponent(d.getElementsByTagName('input')[i].value);
            }
            else {
                query_string+=(query_string!='')?'&':'';
                query_string+=encodeURIComponent(decodeURIComponent(d.getElementsByTagName('input')[i].name))+'='+encodeURIComponent(d.getElementsByTagName('input')[i].value);
            }
        }
    }
    var ds = d.getElementsByClassName('date');
    for (var i = 0; i < ds.length; i++) {
        var day = '',
            month = '',
            year = '',
            hour = '',
            minute = '';
        for (var j = 0; j < ds[i].getElementsByTagName('input').length; j++) {
            if (!d.getElementsByTagName('input')[i].hasAttribute('sb-form-input')) {
                continue;
            }
            if (ds[i].getElementsByTagName('input')[j].type === 'number') {
                if (decodeURIComponent(ds[i].getElementsByTagName('input')[j].name) === 'day') {
                    day = ds[i].getElementsByTagName('input')[j].value||'';
                } else if (decodeURIComponent(ds[i].getElementsByTagName('input')[j].name) === 'month') {
                    month = ds[i].getElementsByTagName('input')[j].value||'';
                } else if (decodeURIComponent(ds[i].getElementsByTagName('input')[j].name) === 'year') {
                    year = ds[i].getElementsByTagName('input')[j].value||'';
                } else if (decodeURIComponent(ds[i].getElementsByTagName('input')[j].name) === 'hour') {
                    hour = ds[i].getElementsByTagName('input')[j].value||'';
                } else if (decodeURIComponent(ds[i].getElementsByTagName('input')[j].name) === 'minute') {
                    minute = ds[i].getElementsByTagName('input')[j].value||'';
                }
            }
        }
        var f = ds[i].getAttribute('format');
        if (f) {
            if (f.search('dd') !== -1 && day === '' || f.search('MM') !== -1 && month === '' || f.search('yyyy') !== -1 && year === '' || f.search('HH') !== -1 && hour === '' || f.search('mm') !== -1 && minute === '') {
                break;
            }
            f = f.replace('dd', formatDate(day));
            f = f.replace('MM', formatDate(month));
            f = f.replace('yyyy', year);
            f = f.replace('HH', formatDate(hour));
            f = f.replace('mm', formatDate(minute));
            data[decodeURIComponent(ds[i].getAttribute('name'))] = f;
            query_string+=(query_string!='')?'&':'';
            query_string+=encodeURIComponent(decodeURIComponent(ds[i].getAttribute('name')))+'='+encodeURIComponent(f);
        }
    }
    for (i = 0; i < d.getElementsByTagName('textarea').length; i++) {
        if (d.getElementsByTagName('textarea')[i] && d.getElementsByTagName('textarea')[i].hasAttribute('sb-form-textarea')) {
            data[decodeURIComponent(d.getElementsByTagName('textarea')[i].name)] = d.getElementsByTagName('textarea')[i].value.replace(new RegExp('\\n', 'g'), ' ');
            query_string+=(query_string!='')?'&':'';
            query_string+=encodeURIComponent(decodeURIComponent(d.getElementsByTagName('textarea')[i].name))+'='+encodeURIComponent(d.getElementsByTagName('textarea')[i].value.replace(new RegExp('\\n', 'g'), ' '));
        }
    }
    for (i = 0; i < d.getElementsByTagName('select').length; i++) {
        if (d.getElementsByTagName('select')[i] && d.getElementsByTagName('select')[i].hasAttribute('sb-form-select') && d.getElementsByTagName('select')[i].options[d.getElementsByTagName('select')[i].selectedIndex]) {
            data[decodeURIComponent(d.getElementsByTagName('select')[i].name)] = d.getElementsByTagName('select')[i].options[d.getElementsByTagName('select')[i].selectedIndex].value;
            query_string+=(query_string!='')?'&':'';
            query_string+=encodeURIComponent(decodeURIComponent(d.getElementsByTagName('select')[i].name))+'='+encodeURIComponent(d.getElementsByTagName('select')[i].options[d.getElementsByTagName('select')[i].selectedIndex].value);
        }
    }
    if (actionOptin !== "true") {
        var div = document.createElement('div');
        div.innerHTML = formUrl;
        var xhr = createXhrObject();
        xhr.open('POST', div.firstChild.nodeValue, !0);
        xhr.setRequestHeader('AccountId', accountId);
        var json = JSON.stringify(data);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status >= 200 && xhr.status < 400) {
                    if (actionType === 'message') {
                        document.getElementById('sb_form').style.borderRadius = "1px";
                        document.getElementById('sb_form').innerHTML = getMessageSuccess(actionContentTitle, actionContentMessage);
                        var a = document.getElementById('sb_form');
                        var p = a.parentNode;
                        while (p.firstChild) {
                            p.removeChild(p.firstChild);
                        }
                        p.appendChild(a);
                    } else {
                        aLink = decodeURLComponent(actionLink);
                        var decodeURL = decodeURIComponent(aLink);
                        var params;
                        if (decodeURL.indexOf('?') !== -1) {
                            var qStr = decodeURL.substring( decodeURL.indexOf('?') + 1 );
                            params = parseQueryString(qStr);
                        }
                        var url = aLink;
                        url += (params && Object.keys(params).length > 0) ? '&' : '?';
                        url += query_string;
                        window.location.replace(url);
                    }
                } else if (xhr.status === 500 && JSON.parse(xhr.responseText).message.toLowerCase().indexOf('lock') !== -1) {
                    displayErrorEditing(resUrl, actionErrorTitle, formEditErrorMessage);
                } else if (actionType === 'message') {
                    displayError(resUrl, actionErrorTitle, actionErrorMessage);
                } else {
                    var aLink = decodeURLComponent(actionLink);
                    window.location.replace(aLink);
                }
            }
        };
        document.getElementById('submitInput').disabled = !0;
        document.getElementsByClassName('loader')[0].style.display = '';
        xhr.send(json);
    } else {
        var recipientFields = '';
        var urlRedirection = '';
        var div = document.createElement('div');
        div.innerHTML = actionLink;
        var params = '';
        var decodeURL = decodeURIComponent(actionLink);
        var qStr = decodeURL.indexOf('?') !== -1 ? decodeURL.substring( decodeURL.indexOf('?') + 1 ) : '';
        var userLink = document.createElement('a');
        userLink.setAttribute('href', decodeURIComponent(actionLink));
        var userLinkParams = parseQueryString(qStr);
        if (userLinkParams !== undefined) {
          var pe = entries(userLinkParams);
          for (var i in pe) {
            params+=(params!='' && query_string.slice(-1)!='&')?'&':'';
            params+= 'sb_user_'+pe[i][0]+'='+pe[i][1];
          }
        }
        var pe = entries(data);
        for (var i in pe)  {
            params += (params != '' && params.slice(-1) != '&') ? '&' : '';
            params += pe[i][0] + '=' + pe[i][1];
            recipientFields += "&" + pe[i][0] + '=' + pe[i][1];
        }
        var pathname = '';
        if (userLink.pathname !== '') {
          pathname = userLink.pathname === '/' ? '' : userLink.pathname;
          pathname = pathname !== '' ? ( pathname[0] !== '/' ? '/'+pathname : pathname ) : '';
        }
        params += userLink.href !== '' ? '&sb_userlink=' + userLink.protocol+'//'+userLink.hostname+pathname : '';
        urlRedirection = userLink.href !== '' ? userLink.protocol+'//'+userLink.hostname+pathname : '';
        var urlConf = resUrl+'/validation.html?accountId'+encodeURIComponent('='+accountId+'&sb_api_url='+formUrl+'&'+params);
        var xhr = createXhrObject();
        var optinUrl = resUrl;
        if (resUrl && optinUrl.slice(-1) !== '/') {
          optinUrl += '/';
        }
        xhr.open('GET', optinUrl+'optin.html', !0);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status >= 200 && xhr.status < 400) {
                    var sendXhr = createXhrObject();
                    var div = document.createElement('div');
                    div.innerHTML = formOptinUrl;
                    var sendUrl = div.firstChild.nodeValue;
                    sendXhr.open('POST', sendUrl, !0);
                    sendXhr.setRequestHeader('Content-Type', "application/json;charset=UTF-8");
                    if (formApiUser && formApiKey) {
                        sendXhr.setRequestHeader('X-Tipimail-ApiUser', formApiUser);
                        sendXhr.setRequestHeader('X-Tipimail-ApiKey', formApiKey);
                    }
                    div.innerHTML = actionAlias;
                    var alias = div.firstChild.nodeValue;
                    div.innerHTML = actionSubject;
                    var subj = div.firstChild.nodeValue;
                    var sendData = {
                        to: [{
                            address: recipient,
                        }],
                        msg: {
                            from: {
                                personalName: alias,
                                address: actionRecipient + '@optin.sbcform.com',
                            },
                            subject: alias + ' : ' + subj,
                            html: xhr.responseText,
                        },
                        headers: {
                            "X-TM-SUB": [{
                                email: recipient,
                                values: {
                                    company: alias,
                                    subject: subj,
                                    url_conf: urlConf,
                                    email_admin: actionReply,
                                    subscribe: formOptinTextSubscribe,
                                    details_1: formOptinTextDetails1,
                                    details_2: formOptinTextDetails2,
                                    contact: formOptinTextContact,
                                    antispam: formOptinTextAntispam,
                                    antispam_link: formOptinTextAntispamLink,
                                    antispam_url: formOptinTextAntispamUrl,
                                }
                            }]
                        }
                    };
                    if (formOptinUrl.indexOf("/optin") !== -1) {
                      var formId = formOptinTextSubscribe;
                      var lang = formOptinTextDetails1;
                      var product = formOptinTextDetails2;
                      sendData = {
                        recipientEmail: recipient,
                        replyEmail: actionReply,
                        senderName: alias,
                        senderEmailName: actionRecipient,
                        urlValidation: urlConf,
                        subject: subj,
                        lang: lang,
                        product: product,
                      };
                      if (formId !== "-") {
                        sendData = {
                          accountId: accountId,
                          formId: formId,
                          recipientEmail: recipient,
                          recipientFields: recipientFields,
                        };
                        if (actionLink === '') {
                          sendData.urlRedirection = urlRedirection;
                        }
                      }
                    }
                    var sendJson = JSON.stringify(sendData);
                    sendXhr.onreadystatechange = function()  {
                        if (sendXhr.status >= 200 && sendXhr.status < 400) {
                            document.getElementById('sb_form').style.borderRadius = "1px";
                            document.getElementById('sb_form').innerHTML = getMessageOptin(actionEmailTitle, actionEmailMessage);
                            var a = document.getElementById('sb_form');
                            var p = a.parentNode;
                            while (p.firstChild) {
                                p.removeChild(p.firstChild);
                            }
                            p.appendChild(a);
                        } else {
                            displayError(resUrl, actionErrorTitle, actionErrorMessage);
                        }
                    };
                    sendXhr.send(sendJson);
                } else  {
                    displayError(resUrl, actionErrorTitle, actionErrorMessage);
                }
            }
        };
        document.getElementById('submitInput').disabled = "disabled";
        document.getElementById('sb_form').disabled = "disabled";
        document.getElementsByClassName('loader')[0].style.display = '';
        xhr.send(null);
    }
}

function htmlDecode(input){
  var e = document.createElement('textarea');
  e.innerHTML = input;
  return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
}

function validate() {
    var data = {}, query_string = '', userLink = '', userLinkParams, accountId = '';
    var params = parseQueryString(decodeURIComponent(document.location.search));
    if (params !== undefined) {
        userLink = params.sb_userlink ? params.sb_userlink : '';
        accountId = params.accountId;
        apiUrl = params.sb_api_url;
        delete params.sb_userlink;
        delete params.accountId;
        delete params.sb_api_url;
        var pe = entries(params);
        for (var i in pe) {
            if (!pe[i][0].startsWith('sb_user_')) {
                data[pe[i][0]] = pe[i][1];
                query_string+=(query_string!='' && query_string.slice(-1)!='&')?'&':'';
                query_string+= pe[i][0]+'='+pe[i][1];
            } else {
                query_string+=(query_string!='' && query_string.slice(-1)!='&')?'&':'';
                query_string+= pe[i][0].replace('sb_user_','')+'='+pe[i][1];
            }
        }
        userLink += '?'+query_string;
        var div = document.createElement('div');
        div.innerHTML = apiUrl;
        var xhr = createXhrObject();
        xhr.open('POST', div.firstChild.nodeValue, !0);
        xhr.setRequestHeader('AccountId', accountId);
        var json = JSON.stringify(data);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                var success = xhr.status >= 200 && xhr.status < 400;
                window.location.replace(userLink+'&success='+success);
            }
        };
        xhr.send(json);
    }
}

function entries(obj) {
  if (!Object.entries) {
    var ownProps = Object.keys( obj ), i = ownProps.length, resArray = new Array(i);
    while (i--)
      resArray[i] = [ownProps[i], obj[ownProps[i]]];

    return resArray;
  }
  return Object.entries(obj);
}

function formatDate(n)  {
    if (n.length == 1) {
        return '0' + n;
    }
    return n;
}

function decodeURLComponent(url) {
    var div = document.createElement('div');
    div.innerHTML = url;
    return div.firstChild.nodeValue;
  }

function displayError(resUrl, actionErrorTitle, actionErrorMessage) {
    document.getElementById('sb_form').style.borderRadius = "1px";
    document.getElementById('sb_form').innerHTML = getMessageError(resUrl, actionErrorTitle, actionErrorMessage);
    var a = document.getElementById('sb_form');
    var p = a.parentNode;
    while (p.firstChild) {
        p.removeChild(p.firstChild);
    }
    p.appendChild(a);
}

function displayErrorEditing(resUrl, actionErrorTitle, formEditErrorMessage) {
    document.getElementById('sb_form').style.borderRadius = "1px";
    document.getElementById('sb_form').innerHTML = getMessageMaintenanceError(resUrl, actionErrorTitle, formEditErrorMessage);
    var a = document.getElementById('sb_form');
    var p = a.parentNode;
    while (p.firstChild) {
        p.removeChild(p.firstChild);
    }
    p.appendChild(a);
}

function createXhrObject() {
    if (window.XMLHttpRequest) return new XMLHttpRequest();
    if (window.ActiveXObject) {
        var names = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
        for (var i in names) {
            try {
                return new ActiveXObject(names[i]);
            } catch (e) {}
        }
    }
    return null
}

function addStyle(id, css) {
    var styles = document.getElementById(id);
    if (styles === null) {
        var head = document.head ||  document.getElementsByTagName('head')[0],
            style = document.createElement('style');
        style.type = 'text/css';
        style.id = id;
        if (style.styleSheet) {
            style.styleSheet.cssText = css;
        } else {
            style.appendChild(document.createTextNode(css));
        }
        head.appendChild(style);
    }
}

function parseQueryString(queryString) {
    let qString = queryString;
    if (!qString) {
        return undefined;
    }
    if (qString[0] === '?') {
        qString = qString.slice(1, qString.length);
    }
    const params = {};
    let queries = qString.split('&');
    let l = queries.length;
    let temp = [];
    for (let i = 0; i < l; i++) {
        temp = queries[i].split('=');
        params[temp[0]] = temp[1];
    }
    return params;
}

function updateRequirements(name) {
  var checkboxesGroup = document.getElementsByName(name);
  var isChecked = false;
  for (var i = 0; i < checkboxesGroup.length; i++) {
    if (checkboxesGroup[i].checked) {
      isChecked = true;
      break;
    }
  }
  for (var i = 0; i < checkboxesGroup.length; i++) {
    checkboxesGroup[i].required = !isChecked;
  }
}

function getMessageSuccess(actionContentTitle, actionContentMessage) {
    addStyle('css-success', `
    @import url(https://fonts.googleapis.com/css?family=Bree+Serif|Ubuntu|Dancing+Script|Droid+Sans|Lato|Lobster|Montserrat|Open+Sans|Pacifico|Raleway|Roboto|Source+Sans+Pro|Titillium+Web&amp;subset=cyrillic,cyrillic-ext,greek,greek-ext,latin-ext,vietnamese);
    .message-div {
      display: flex;
      flex-direction: column;
      height: auto;
      margin: 25px 15px 15px 15px;
      padding: 25px;
      border-radius: 1px;
    }
    .message-div-success {
      background-color: #4faf56;
    }
    .icon {
      display: inline-block;
      width: 30px;
      height: 30px;
      -ms-transform: rotate(45deg);
      -webkit-transform: rotate(45deg);
      transform: rotate(45deg);
    }
    .icon-success {
      margin-left: auto;
      margin-top: 3px;
      margin-right: 15px;
    }
    .checkmark_left {
      position: absolute;
      width: 15px;
      height: 6px;
      background-color: #72bf75;
      left: 6px;
      top: 24px;
    }
    .checkmark_right {
      position: absolute;
      width: 6px;
      height: 30px;
      background-color: #72bf75;
      left: 21px;
    }`);
    return `
  <div class="message-div message-div-success">
    <div style="display: flex; flex-direction: row; width: 100%;">
      <span style="font-size: 30px; font-family: 'Open Sans', sans-serif; color: #fff; padding-bottom: 4px;">` + actionContentTitle + `</span>
      <span class="icon icon-success">
        <div class="checkmark_left"></div>
        <div class="checkmark_right"></div>
      </span>
    </div>
    <div style="display: inline-block; width: 90%;">
       <span style="font-size: 14px; font-family: 'Lato', sans-serif; color: #fff; line-height: 24px;">` + actionContentMessage + `</span>
    </div>
  </div>`;
}

function getMessageOptin(actionEmailTitle, actionEmailMessage) {
    addStyle('css-optin', `
    @import url(https://fonts.googleapis.com/css?family=Bree+Serif|Ubuntu|Dancing+Script|Droid+Sans|Lato|Lobster|Montserrat|Open+Sans|Pacifico|Raleway|Roboto|Source+Sans+Pro|Titillium+Web&amp;subset=cyrillic,cyrillic-ext,greek,greek-ext,latin-ext,vietnamese);
    .message-div {
      display: flex;
      flex-direction: column;
      height: auto;
      margin: 25px 15px 15px 15px;
      padding: 25px;
      border-radius: 1px;
    }
    .message-div-success-optin {
      background-color: #06aaf4;
    }
    .info {
      font-size: 44px;
      font-family: "Consolas";
      color: #5bbdf6;
      margin-left: auto;
      padding-right: 20px;
    }`);
    return `
  <div class="message-div message-div-success-optin">
      <div style="display: flex; flex-direction: row;">
        <span style="font-size: 30px; font-family: 'Open Sans', sans-serif; color: #fff; padding-bottom: 4px;">` + actionEmailTitle + `</span>
        <span class="info"><i>i</i></span>
      </div>
      <div style="display: inline-block; width: 90%;">
        <span style="font-size: 14px; font-family: 'Lato', sans-serif; color: #fff; line-height: 24px;">` + actionEmailMessage + `</span>
      </div>
    </div>`;
}

function getMessageError(resUrl, actionErrorTitle, actionErrorMessage) {
    addStyle('css-error', `
    @import url(https://fonts.googleapis.com/css?family=Bree+Serif|Ubuntu|Dancing+Script|Droid+Sans|Lato|Lobster|Montserrat|Open+Sans|Pacifico|Raleway|Roboto|Source+Sans+Pro|Titillium+Web&amp;subset=cyrillic,cyrillic-ext,greek,greek-ext,latin-ext,vietnamese);
    .message-div {
      display: flex;
      flex-direction: column;
      height: auto;
      margin: 25px 15px 15px 15px;
      padding: 25px;
      border-radius: 1px;
    }
    .message-div-error {
      background-color: #cf4338;
    }
    .icon-error {
      margin: 2px 12px 0 auto;
      width: 40px;
      height: 34px;
    }`);
    return `
  <div class="message-div message-div-error">
    <div style=" display: flex; flex-direction: row;">
      <span style="font-size: 30px; font-family: 'Open Sans', sans-serif; color: #fff; padding-bottom: 4px;">` + actionErrorTitle + `</span>
      <img src="`+ resUrl +`error.png" class="icon-error">
    </div>
    <div style="display: inline-block; width: 90%;">
      <span style="font-size: 14px; font-family: 'Lato', sans-serif; color: #fff; line-height: 24px;">` + actionErrorMessage + `</span>
    </div>
  </div>`;
}

function getMessageMaintenanceError(resUrl, actionErrorTitle, formEditErrorMessage) {
    addStyle('css-maintenance-error', `
    @import url(https://fonts.googleapis.com/css?family=Bree+Serif|Ubuntu|Dancing+Script|Droid+Sans|Lato|Lobster|Montserrat|Open+Sans|Pacifico|Raleway|Roboto|Source+Sans+Pro|Titillium+Web&amp;subset=cyrillic,cyrillic-ext,greek,greek-ext,latin-ext,vietnamese);
    .message-div {
      display: flex;
      flex-direction: column;
      height: auto;
      margin: 25px 15px 15px 15px;
      padding: 25px;
      border-radius: 1px;
    }
    .message-div-maintenance {
      background-color: #cf4338;
    }
    .icon-error {
      margin: 2px 12px 0 auto;
      width: 40px;
      height: 34px;
    }`);
    return `
  <div class="message-div message-div-maintenance">
    <div style=" display: flex; flex-direction: row;">
      <span style="font-size: 30px; font-family: 'Open Sans', sans-serif; color: #fff; padding-bottom: 4px;">` + actionErrorTitle + `</span>
      <img src="`+ resUrl +`error.png" class="icon-error">
    </div>
    <div style="display: inline-block; width: 90%;">
      <span style="font-size: 14px; font-family: 'Lato', sans-serif; color: #fff; line-height: 24px;">` + formEditErrorMessage + `</span>
    </div>
  </div>`;
}
